const { ethers, upgrades } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  console.log("\nüöÄ Starting deployment...\n");

  const [deployer] = await ethers.getSigners();
  console.log("üìù Deploying contracts with account:", deployer.address);
  console.log("üí∞ Account balance:", ethers.formatEther(await ethers.provider.getBalance(deployer.address)), "ETH\n");

  // ========================================
  // 1. Deploy WaitToken
  // ========================================
  console.log("üì¶ Deploying WaitToken...");
  const WaitToken = await ethers.getContractFactory("WaitToken");
  const waitToken = await WaitToken.deploy();
  await waitToken.waitForDeployment();
  const waitTokenAddress = await waitToken.getAddress();
  console.log("‚úÖ WaitToken deployed to:", waitTokenAddress);

  // ========================================
  // 2. Deploy TokenSale
  // ========================================
  console.log("\nüì¶ Deploying TokenSale...");
  const TokenSale = await ethers.getContractFactory("TokenSale");
  const tokenSale = await TokenSale.deploy(waitTokenAddress);
  await tokenSale.waitForDeployment();
  const tokenSaleAddress = await tokenSale.getAddress();
  console.log("‚úÖ TokenSale deployed to:", tokenSaleAddress);

  // ========================================
  // 3. Set TokenSale as minter in WaitToken
  // ========================================
  console.log("\nüîó Setting TokenSale as minter in WaitToken...");
  const setMinterTx = await waitToken.setTokenSaleContract(tokenSaleAddress);
  await setMinterTx.wait();
  console.log("‚úÖ TokenSale authorized to mint tokens");

  // ========================================
  // 4. Deploy WaitingList with Proxy Pattern
  // ========================================
  console.log("\nüì¶ Deploying WaitingList (UUPS Proxy)...");

  const WaitingList = await ethers.getContractFactory("WaitingList");
  const waitingList = await upgrades.deployProxy(
    WaitingList,
    [waitTokenAddress],
    { kind: "uups" }
  );
  await waitingList.waitForDeployment();

  const proxyAddress = await waitingList.getAddress();
  const waitingListImplAddress = await upgrades.erc1967.getImplementationAddress(proxyAddress);

  console.log("‚úÖ WaitingList proxy deployed to:", proxyAddress);
  console.log("‚úÖ WaitingList implementation at:", waitingListImplAddress);

  // ========================================
  // 5. Verify deployment
  // ========================================
  console.log("\nüîç Verifying deployment...");

  const tokenName = await waitToken.name();
  const tokenSymbol = await waitToken.symbol();
  console.log(`  - WaitToken: ${tokenName} (${tokenSymbol})`);

  const tokenSaleOwner = await tokenSale.owner();
  console.log(`  - TokenSale owner: ${tokenSaleOwner}`);

  const waitingListOwner = await waitingList.owner();
  const waitingListVersion = await waitingList.version();
  console.log(`  - WaitingList owner: ${waitingListOwner}`);
  console.log(`  - WaitingList version: ${waitingListVersion}`);

  // ========================================
  // 6. Generate ABIs
  // ========================================
  console.log("\nüìÑ Generating ABIs...");

  const abiDir = path.join(__dirname, "..", "src", "utils");
  if (!fs.existsSync(abiDir)) {
    fs.mkdirSync(abiDir, { recursive: true });
  }

  const abiContent = `// Auto-generated by deploy.js
// Do not edit manually

export const WAIT_TOKEN_ABI = ${JSON.stringify(WaitToken.interface.formatJson(), null, 2)};

export const TOKEN_SALE_ABI = ${JSON.stringify(TokenSale.interface.formatJson(), null, 2)};

export const WAITING_LIST_ABI = ${JSON.stringify(WaitingList.interface.formatJson(), null, 2)};
`;

  fs.writeFileSync(path.join(abiDir, "abis.js"), abiContent);
  console.log("‚úÖ ABIs saved to src/utils/abis.js");

  // ========================================
  // 7. Generate config
  // ========================================
  console.log("\nüìÑ Generating config...");

  const configDir = path.join(__dirname, "..", "src", "constants");
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }

  const network = await ethers.provider.getNetwork();
  const chainId = Number(network.chainId);

  const configContent = `// Auto-generated by deploy.js
// Do not edit manually

export const CONTRACTS = {
  waitToken: {
    address: "${waitTokenAddress}",
    chainId: ${chainId}
  },
  tokenSale: {
    address: "${tokenSaleAddress}",
    chainId: ${chainId}
  },
  waitingList: {
    address: "${proxyAddress}",  // Proxy address (users interact with this)
    implementationAddress: "${waitingListImplAddress}",  // Implementation address
    chainId: ${chainId}
  }
};

export const NETWORK_CONFIG = {
  chainId: ${chainId},
  name: "${network.name}",
  rpcUrl: "http://127.0.0.1:8546"
};
`;

  fs.writeFileSync(path.join(configDir, "config.js"), configContent);
  console.log("‚úÖ Config saved to src/constants/config.js");

  // ========================================
  // 8. Summary
  // ========================================
  console.log("\n" + "=".repeat(60));
  console.log("üéâ DEPLOYMENT COMPLETE!");
  console.log("=".repeat(60));
  console.log("\nüìã Contract Addresses:");
  console.log("  WaitToken:             ", waitTokenAddress);
  console.log("  TokenSale:             ", tokenSaleAddress);
  console.log("  WaitingList (Proxy):   ", proxyAddress);
  console.log("  WaitingList (Impl):    ", waitingListImplAddress);
  console.log("\nüíæ Generated Files:");
  console.log("  - src/utils/abis.js");
  console.log("  - src/constants/config.js");
  console.log("\nüîó Network:", network.name, `(ChainId: ${chainId})`);
  console.log("\n" + "=".repeat(60) + "\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå Deployment failed:");
    console.error(error);
    process.exit(1);
  });
